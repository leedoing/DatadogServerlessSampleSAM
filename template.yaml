AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref "AWS::StackName"
      apiKey: 40decbd9c2f690c95a29cc7f3fcba8c6
      nodeLayerVersion: 89
      extensionLayerVersion: 41
      pythonLayerVersion: 69
      site: "datadoghq.com"
      enableDDTracing: true
      captureLambdaPayload: true
      service: !Sub "${AppName}"
      env: dev
      version: 1.0.0
      tags: "dd:true"

Description: Building Serverless Applications with AWS SAM

Parameters:
  AppName:
    Description: Name of application.
    Type: String
  ApiStageName:
    Description: Name of API stage.
    Type: String

Globals:
  Function:
    CodeUri: src/
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    Timeout: 5
    MemorySize: 512

# DynamoDB table to store data with stream enabled:
Resources:
  VotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-vote-table"
      AttributeDefinitions:
        - AttributeName: vote_name
          AttributeType: S
      KeySchema:
        - AttributeName: vote_name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  WinTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-win-table"
      AttributeDefinitions:
        - AttributeName: win_name
          AttributeType: S
      KeySchema:
        - AttributeName: win_name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  # API Gateway REST API with CORS configured:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AppName}-api"
      StageName: !Ref ApiStageName
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"
        MaxAge: "'0'"

  # Lambda Function that scans the DynamoDB table:
  ScanDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-scan-dynamodb-function"
      Handler: scan-dynamodb.lambda_handler
      # DynamoDB read access is required.
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref VotesTable
      Environment:
        Variables:
          DDB_VOTES_TABLE_NAME: !Ref VotesTable
      # Function invocation: API GET method on /votes resource.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /votes
            Method: GET

  # Lambda Function that updates the DynamoDB table:
  UpdateDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-sqs-update-dynamodb-function"
      Handler: sqs-update-dynamodb.handler
      # DynamoDB write access and SQS poller access is required.
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref VotesTable
        - DynamoDBWritePolicy:
            TableName: !Ref WinTable
        - DynamoDBReadPolicy:
            TableName: !Ref WinTable
        - SQSPollerPolicy:
            QueueName: !GetAtt SqsQueue.QueueName
      Environment:
        Variables:
          DDB_VOTES_TABLE_NAME: !Ref VotesTable
          DDB_WIN_TABLE_NAME: !Ref WinTable
      # Function invocation: Lambda polls SQS Queue.
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SqsQueue.Arn
            BatchSize: 10
            Enabled: true

  # Standard SQS Queue:
  SqsQueue:
    Type: AWS::SQS::Queue

  # Lambda Function that publishes a message to the SQS queue:
  # Python
  SqsPublishFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-sqs-publish-function"
      CodeUri: ./src
      Handler: sqs-publish.handler
      Runtime: python3.8
      # SQS SendMessage access is required:
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SqsQueue.QueueName
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref SqsQueue
      # Function invocation: API POST method on /votes resource.
      Events:
        PostVotes:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /votes
            Method: POST

  GetDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-get-dynamodb-function"
      CodeUri: ./src
      Handler: get-dynamodb.handler
      Runtime: python3.8
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref WinTable
        - DynamoDBWritePolicy:
            TableName: !Ref WinTable
      Environment:
        Variables:
          DDB_WIN_TABLE_NAME: !Ref WinTable
      # Function invocation: API POST method on /votes resource.
      Events:
        PostVotes:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /win
            Method: GET

  # Lambda Function that publishes a message to the SQS queue:
  # Node.js
  # SqsPublishFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub "${AppName}-sqs-publish-function"
  #     Handler: sqs-publish.handler
  #     # SQS SendMessage access is required:
  #     Policies:
  #       - SQSSendMessagePolicy:
  #           QueueName: !GetAtt SqsQueue.QueueName
  #     Environment:
  #       Variables:
  #         SQS_QUEUE_URL: !Ref SqsQueue
  #     # Function invocation: API POST method on /votes resource.
  #     Events:
  #       PostVotes:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref RestApi
  #           Path: /votes
  #           Method: POST

Outputs:
  ApiEndpoint:
    Description: "API Gateway Endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"
